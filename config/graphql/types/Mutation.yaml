Mutation:
  type: object
  config:
    fields:
      createAuthor:
        type: Author!
        args:
          author:
            type: AuthorData!
            validation: cascade
        resolve: '@=mutation("App\\GraphQL\\Mutator\\AuthorMutator::createAuthor", args["author"])'
      editAuthor:
        type: Author!
        args:
          id:
            type: Int!
          author:
            type: AuthorData!
            validation: cascade
        resolve: '@=mutation("App\\GraphQL\\Mutator\\AuthorMutator::editAuthor", args["id"], args["author"])'
      deleteAuthor:
        type: Boolean!
        args:
          id:
            type: Int!
        resolve: '@=mutation("App\\GraphQL\\Mutator\\AuthorMutator::deleteAuthor", args["id"])'
      createBook:
        type: Book!
        args:
          book:
            type: BookData!
            validation: cascade
        resolve: '@=mutation("App\\GraphQL\\Mutator\\BookMutator::createBook", args["book"])'
      editBook:
        type: Book!
        args:
          id:
            type: Int!
          book:
            type: BookData!
            validation: cascade
        resolve: '@=mutation("App\\GraphQL\\Mutator\\BookMutator::editBook", args["id"], args["book"])'
      deleteBook:
        type: Boolean!
        args:
          id:
            type: Int!
        resolve: '@=mutation("App\\GraphQL\\Mutator\\BookMutator::deleteBook", args["id"])'